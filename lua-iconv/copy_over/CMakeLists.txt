CMAKE_MINIMUM_REQUIRED(VERSION 3.6)

PROJECT("luaiconv")

ENABLE_TESTING()
IF(CMAKE_VERSION VERSION_LESS 3.12.0)
	FIND_PACKAGE(PythonInterp 3.5 REQUIRED)
	SET(PYTHON_EXE "${PYTHON_EXECUTABLE}")
ELSE(CMAKE_VERSION VERSION_LESS 3.12.0)
	FIND_PACKAGE(Python3 REQUIRED)
	SET(PYTHON_EXE "${Python3_EXECUTABLE}")
ENDIF(CMAKE_VERSION VERSION_LESS 3.12.0)

# Build the Lua module.
ADD_LIBRARY(TARGET_luaiconv MODULE
            luaiconv.c)
TARGET_INCLUDE_DIRECTORIES(TARGET_luaiconv
                           PRIVATE ${LIBICONV_INCLUDE_DIR} ${LUA_INCLUDE_DIR})
TARGET_LINK_LIBRARIES(TARGET_luaiconv ${LIBICONV_LIBRARY} ${LIBCHARSET_LIBRARY} ${LUA_LIBRARIES})

# Set the name of the output file to "iconv".
SET_TARGET_PROPERTIES(TARGET_luaiconv PROPERTIES PREFIX "" OUTPUT_NAME "iconv")

# On mingw link all compiler libraries static.
IF((${CMAKE_SYSTEM_NAME} STREQUAL "Windows") AND (${CMAKE_COMPILER_IS_GNUCC}))
	SET_PROPERTY(TARGET TARGET_luaiconv PROPERTY LINK_FLAGS "-static -static-libgcc -static-libstdc++")
ENDIF((${CMAKE_SYSTEM_NAME} STREQUAL "Windows") AND (${CMAKE_COMPILER_IS_GNUCC}))

# Install the lua module.
INSTALL(TARGETS TARGET_luaiconv
        EXPORT EXPORT_package
        LIBRARY DESTINATION ${INSTALL_DIR_LUA_MODULES}
        ARCHIVE DESTINATION lib
        RUNTIME DESTINATION bin
        INCLUDES DESTINATION include)

# Add tests for this module.
IF((${CMAKE_SYSTEM_NAME} STREQUAL "Windows") AND (${CMAKE_COMPILER_IS_GNUCC}))
	# Here are the MinGW specific tests.
	ADD_TEST(NAME lpeglabel_MinGW_DLL_dependencies
	         COMMAND "${PYTHON_EXE}" ${TEST_SCRIPT_FOLDER}/mingw_dll_dependencies.py -u lua5.1 -u lua5.2 -u lua5.3 -u lua5.4 $<TARGET_FILE:TARGET_luaiconv>)
ENDIF((${CMAKE_SYSTEM_NAME} STREQUAL "Windows") AND (${CMAKE_COMPILER_IS_GNUCC}))
